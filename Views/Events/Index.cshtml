@model List<FinalProject.Models.Etkinlik>

@{
    ViewData["Title"] = "Etkinlikler";
}

<div class="events-page">
    <div class="events-hero">
        <div class="events-hero-content">
            <h1>Etkinlikler</h1>
            <p>Kampüs Yanımda'daki tüm etkinlikleri keşfedin</p>
        </div>
    </div>

    <div class="events-container">
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-warning mb-4">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @TempData["Error"]
            </div>
        }

        <div class="events-header">
            <div class="filter-buttons">
                <button class="btn btn-filter active" onclick="filterEvents('all')">Tüm Etkinlikler</button>
                <button class="btn btn-filter" onclick="filterEvents('online')">Online Etkinlikler</button>
                <button class="btn btn-filter" onclick="filterEvents('physical')">Yüz Yüze Etkinlikler</button>
            </div>
            @if (ViewBag.IsToplulukBaskani)
            {
                <a href="@Url.Action("Create", "Events")" class="btn btn-create">
                    <i class="bi bi-plus-lg"></i> Yeni Etkinlik
                </a>
            }
            else if (User.Identity.IsAuthenticated)
            {
                <div class="alert alert-warning mb-0 d-inline-block">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Etkinlik oluşturmak için bir topluluğun başkanı olmanız gerekmektedir.
                </div>
            }
        </div>

        <div class="event-grid" id="eventsContainer">
            @if (Model != null && Model.Any())
            {
                foreach (var etkinlik in Model)
                {
                    <div class="event-card event-item @(etkinlik.Online ? "online" : "physical")">
                        @if (!string.IsNullOrEmpty(etkinlik.ResimUrl))
                        {
                            <img src="@etkinlik.ResimUrl" alt="@etkinlik.Baslik" class="event-image">
                        }
                        <div class="event-details">
                            <span class="event-tag @(etkinlik.Online ? "online" : "physical")">
                                @(etkinlik.Online ? "Online" : "Yüz Yüze")
                            </span>
                            <h3>@etkinlik.Baslik</h3>
                            <p>@(etkinlik.Aciklama.Length > 150 ? etkinlik.Aciklama.Substring(0, 147) + "..." : etkinlik.Aciklama)</p>
                            <div class="event-meta">
                                <p>
                                    <i class="bi bi-people"></i> @etkinlik.KatilimSayisi katılımcı
                                </p>
                                <p>
                                    <i class="bi bi-calendar"></i> @etkinlik.Tarih.ToString("dd MMMM yyyy HH:mm")
                                </p>
                                <p>
                                    <i class="bi bi-geo-alt"></i> @etkinlik.Lokasyon
                                </p>
                            </div>
                            <a href="@Url.Action("Details", "Events", new { id = etkinlik.ID })" class="btn btn-details">
                                Detayları Gör
                            </a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-events">
                    <i class="bi bi-calendar-x"></i>
                    <h4>Henüz hiç etkinlik yok</h4>
                    <p>İlk etkinliği oluşturmak için "Yeni Etkinlik" butonuna tıklayın.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
.events-page {
    min-height: 100vh;
    background: white;
}

.events-hero {
    background: linear-gradient(135deg, #1E1B4B 0%, #7E22CE 100%);
    padding: 6rem 8rem;
    color: white;
    margin-top: -2rem;
    margin-bottom: 4rem;
    position: relative;
    overflow: hidden;
}

.events-hero-content {
    max-width: 1400px;
    margin: 0 auto;
    text-align: center;
}

.events-hero h1 {
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 1.5rem;
    color: white;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.events-hero p {
    font-size: 1.4rem;
    opacity: 0.9;
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
}

.events-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
}

.events-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
}

.filter-buttons {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.filter-buttons button {
    min-width: 150px;
}

.btn-filter {
    padding: 0.8rem 1.5rem;
    border: 1px solid #e4735d;
    color: #e4735d;
    background: transparent;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    display: inline-block;
    text-align: center;
    cursor: pointer;
    text-decoration: none;
}

.btn-filter:hover, .btn-filter.active {
    background: #e4735d;
    color: white;
}

.btn-create {
    padding: 0.8rem 1.5rem;
    background: #6366f1;
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(99, 102, 241, 0.4);
}

.btn-create:hover {
    background: #4f46e5;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.6);
}

.event-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
}

.event-card {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
}

.event-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 25px rgba(0,0,0,0.1);
}

.event-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.event-details {
    padding: 1.5rem;
}

.event-tag {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    margin-bottom: 1rem;
}

.event-tag.online {
    background-color: rgba(99, 102, 241, 0.1);
    color: #6366f1;
}

.event-tag.physical {
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
}

.event-details h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
    color: #2D3748;
}

.event-details p {
    color: #718096;
    line-height: 1.6;
    margin-bottom: 1.5rem;
}

.event-meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    color: #718096;
    font-size: 0.9rem;
}

.event-meta p {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
}

.event-meta i {
    color: #6366f1;
}

.btn-details {
    width: 100%;
    padding: 0.8rem;
    background: transparent;
    border: 1px solid #6366f1;
    color: #6366f1;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    text-align: center;
    text-decoration: none;
}

.btn-details:hover {
    background: #6366f1;
    color: white;
}

.no-events {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 8rem 2rem;
    width: 100%;
    min-height: 70vh;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

.no-events i {
    font-size: 4rem;
    color: #718096;
    margin-bottom: 2rem;
}

.no-events h4 {
    font-size: 2rem;
    color: #2D3748;
    margin-bottom: 1rem;
    font-weight: 600;
}

.no-events p {
    color: #718096;
    font-size: 1.2rem;
    max-width: 400px;
    line-height: 1.6;
}

@@media (max-width: 1024px) {
    .events-hero {
        padding: 3rem 2rem;
    }

    .events-header {
        flex-direction: column;
        gap: 1rem;
    }

    .filter-buttons {
        width: 100%;
        justify-content: center;
    }

    .btn-create {
        width: 100%;
    }
}

@@media (max-width: 768px) {
    .events-hero h1 {
        font-size: 2.5rem;
    }

    .filter-buttons {
        flex-direction: column;
    }

    .btn-filter {
        width: 100%;
    }

    .event-grid {
        grid-template-columns: 1fr;
    }
}
</style>

@section Scripts {
    <script>
        function filterEvents(type) {
            const container = document.getElementById('eventsContainer');
            const events = container.getElementsByClassName('event-item');
            
            Array.from(events).forEach(event => {
                if (type === 'all') {
                    event.style.display = 'block';
                } else {
                    event.style.display = event.classList.contains(type) ? 'block' : 'none';
                }
            });

            // Update active button state
            const buttons = document.querySelectorAll('.btn-filter');
            buttons.forEach(button => button.classList.remove('active'));
            event.target.classList.add('active');
        }
    </script>
} 